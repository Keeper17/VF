(* ================================================== EXPRESSÕES ARITMÉTICAS ================================================== *)
theory ExprAritmeticas

  use map.Map
  use map.Const
  use int.Int
  use string.String

  (* ======================================================== TIPOS ======================================================== *)

    (* Diferentes tipos de operadores binários. *)
    type oper = Adi (* adição *)
              | Sub (* subtração *)
              | Mul (* multiplicação *)
    
    (* Estado de um programa. *)
    type estado = map string int
    
    (* Função que cria um estado inicial. *)
    function init : estado = const 0
    
    (* Função que atualiza o valor de uma variável num dado estado. *)
    function update (s: estado) (y: string) (n: int) : estado = set s y n

    (* Diferentes tipos de expressões aritméticas. *)
    type aexp = Vcon int            (* valores constantes *)
              | Vsim aexp           (* valores simétricos *)
              | Evar string         (* expressões variáveis *)
              | Ebin aexp oper aexp (* expressões binárias *)

  (* ======================================================= FUNÇÔES ======================================================= *)

    (* Função que retorna o resultado obtido ao aplicar uma dada operação a dois valores. *)
    function aeval_ebin (n1: int) (op: oper) (n2: int) : int =
      (* Existem três tipos de operações diferentes: *)
      match op with
        (* Adição, onde se retorna a soma dos dois valores recebidos; *)
        | Adi -> n1 + n2
        (* Subtração, onde se retorna a diferença dos dois valores recebidos; *)
        | Sub -> n1 - n2
        (* Multiplicação, onde se retorna o produto dos dois valores recebidos. *)
        | Mul -> n1 * n2
      end
      
    (* Função que retorna o simétrico de um valor *)
    function simet (n: int) : int = -n

    (* Função que retorna o valor de uma dada expressão aritmética. *)
    function aeval (e: aexp) (s: estado) : int =
      (* Há três cenários possíveis: *)
      match e with
        (* a expressão é um valor constante, e neste caso, retorna-se o valor do mesmo; *)
        | Vcon n        -> n
        (* a expressão é um valor simétrico, e neste caso, retorna-se o simétrico do valor associado; *)
        | Vsim e        -> simet (aeval e s)
        (* a expressão é uma expressão variável, e neste caso, retorna-se o valor associado à mesma; *)
        | Evar x        -> get s x
        (* a expressão é uma expressão binária, e neste caso, retorna-se o resultado da mesma. *)
        | Ebin e1 op e2 -> aeval_ebin (aeval e1 s) op (aeval e2 s)
      end

  (* ======================================================= RELAÇÔES ====================================================== *)

    (* Predicado que determina se um dado valor é o resultado de uma expressão. *)
    inductive aevalR aexp estado int =
      (* No caso da expressão ser um valor constante, então o valor desta deverá ser igual ao valor recebido; *)
      | con : forall s: estado, n: int. aevalR (Vcon n) s n
      (* no caso da expressão ser um valor simétrico, então o valor desta deverá ser o simétrico do valor recebido; *)
      | sim : forall s: estado, e: aexp, n: int. aevalR e s n -> aevalR (Vsim e) s (simet n)
      (* no caso da expressão ser uma expressão variável, então o valor desta deverá ser igual ao valor associado à mesma. *)
      | var : forall s: estado, x: string. aevalR (Evar x) s (get s x)
      (* no caso da expressão ser uma expressão binária, então o valor desta deverá ser igual ao valor recebido. *)
      | bin : forall e1 e2: aexp, op: oper, s: estado, n1 n2: int.
        ((aevalR e1 s n1) /\ (aevalR e2 s n2)) -> (aevalR (Ebin e1 op e2) s (aeval_ebin n1 op n2))

  (* ======================================================== PROVAS ======================================================= *)

    (* Verificar se as constantes estão a ser bem definidas. *)
    goal Con13 :
      let s = init in
        aeval (Vcon 13) s = 13

    (* Verificar se os simétricos estão a ser bem definidos. *)
    goal Sim13 :
      let s = init in
        aeval (Vsim (Vcon 13)) s = -13

    (* Verificar se as variáveis estão a ser bem definidas. *)
    goal Var13 :
      let s = init in
        let x = update s "x" 13 in
          aeval (Evar "x") x = 13

    (* Verificar se as expressões binárias estão a ser bem definidas. *)
    goal Adi11 :
      let s = init in
        aeval (Ebin (Vcon 24) Adi (Vsim (Vcon 13))) s = 11
  
    (* Mais um teste sobre as expressões binárias, um pouco mais complexo. *)
    goal Mul24 :
      let s = init in
        aeval (Ebin (Ebin (Vcon 20) Sub (Vcon 12)) Mul (Vcon 3)) s = 24

    (* Prova que permitir concluir que as definições funcional e relacional estão em concordância. *)
    lemma expr_eval:
      forall e: aexp, s: estado, n: int. aevalR e s n <-> aeval e s = n
end


(* ===================================================== MÁQUINA DE STACK ===================================================== *)
theory MaqStack

  use map.Map
  use map.Const
  use int.Int
  use string.String
  use list.List
  use list.HdTlNoOpt
  use ExprAritmeticas

  (* ======================================================== TIPOS ======================================================== *)
  
    (* Diferentes tipos de operações de stack. *)
    type opstack = SPush int    (* colocar um valor no topo da stack *)
                 | SLoad string (* colocar o valor associado a uma variável no topo da stack *)
                 | SSim         (* trocar o valor no topo da stack pelo seu simétrico *)
                 | SPlus        (* retira os dois valores no topo da stack, e substitui pela sua soma *)
                 | SMinus       (* retira os dois valores no topo da stack, e substitui pela sua diferença *)
                 | SMult        (* retira os dois valores no topo da stack, e substitui pelo seu produto *)

  (* ======================================================= FUNÇÔES ======================================================= *)

    (* Função que avalia programas em linguagem de máquina de stack.
       A função altera uma stack recebida consoante as operações passadas. *)
    function execute (s: estado) (st: list int) (p: list opstack) : (list int) =
      (* O conjunto de operações poderá estar de duas formas: *)
      match p with
        (* caso não haja mais operações a executar, devolvemos o estado atual da stack; *)
        | Nil      -> st
        (* caso ainda haja operações, temos de verificar qual o tipo de operação que se segue *)
        | Cons h t -> match h with
          (* se for um push, inserimos o novo valor na stack, *)
          | SPush n -> execute s (Cons n st) t
          (* se for um load, inserimos o valor associado à variável na stack, *)
          | SLoad x -> execute s (Cons (get s x) st) t
          (* se for um sim, substituimos o valor à cabeça da stack pelo seu simétrico, *)
          | SSim    -> execute s (Cons (simet (hd st)) (tl st)) t
          (* se for um plus, substituimos os dois primeiros valores pela sua soma, *)
          | SPlus   -> execute s (Cons (aeval_ebin (hd st) Adi (hd (tl st))) (tl (tl st))) t
          (* se for um minus, substituimos os dois primeiros valores pela sua diferença, *)
          | SMinus  -> execute s (Cons (aeval_ebin (hd st) Sub (hd (tl st))) (tl (tl st))) t
          (* se for um mult, substituimos os dois primeiros valores pelo seu produto. *)
          | SMult   -> execute s (Cons (aeval_ebin (hd st) Mul (hd (tl st))) (tl (tl st))) t
        end
      end

  (* ======================================================== PROVAS ======================================================= *)

    (* Verificar se os push tão bem definidos. *)
    goal Push :
      let s = init in
        execute s Nil (Cons (SPush 10) Nil) = (Cons 10 Nil)            
    
    (* Verificar se os load tão bem definidos. *)
    goal Load :
      let s = init in
        let x = update s "x" 10 in
        execute x Nil (Cons (SLoad "x") Nil) = (Cons 10 Nil)
    
    (* Verificar se os sim tão bem definidos. *)
    goal Sim :
      let s = init in
        execute s (Cons 10 Nil) (Cons SSim Nil) = (Cons (-10) Nil)
    
    (* Verificar se os plus tão bem definidos. *)
    goal Plus :
      let s = init in
        execute s (Cons 10 (Cons 20 Nil)) (Cons SPlus Nil) = (Cons 30 Nil)
    
    (* Verificar se os minus tão bem definidos. *)
    goal Minus :
      let s = init in
        execute s (Cons 10 (Cons 20 Nil)) (Cons SMinus Nil) = (Cons (-10) Nil)
    
    (* Verificar se os mult tão bem definidos. *)
    goal Mult :
      let s = init in
        execute s (Cons 10 (Cons 20 Nil)) (Cons SMult Nil) = (Cons 200 Nil)
    
    (* Verificar a correção de um programa mais complexo *)
    goal Program :
      let s = update init "x" 10 in
        execute s Nil (Cons (SPush 5) (
                       Cons (SLoad "x") (
                       Cons  SMult (
                       Cons  SSim Nil)))) = (Cons (-50) Nil)

end